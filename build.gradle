buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.0"
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

import de.undercouch.gradle.tasks.download.Download

def versionNumber = '0.1.0'

group = 'com.vperi'
version = versionNumber


apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'de.undercouch.download'


repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile "org.hamcrest:hamcrest-core:1.3" // only necessary if Hamcrest matchers are used
    testRuntime "cglib:cglib-nodep:3.1"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.1"
    // allows mocking of classes without default constructor (together with CGLIB)

    compile 'org.codehaus.groovy:groovy-all:2.4.3'
    compile 'commons-io:commons-io:2.4+'
    compile 'commons-configuration:commons-configuration:1.10+'
    compile 'commons-collections:commons-collections:3.2.+'
    compile 'org.apache.httpcomponents:httpclient:4.3+'
    compile 'org.apache.httpcomponents:httpmime:4.3+'
    compile 'org.pegdown:pegdown:1.5.+'
    compile 'ch.qos.logback:logback-core:1.1.+'
    compile 'com.googlecode.plist:dd-plist:1.16'
}

sourceSets.main.java.srcDirs = [ ]
sourceSets.main.groovy.srcDirs += [ "src/main/java" ]

uploadArchives {
    repositories {
        mavenDeployer {
            repository( url: uri( '../repository' ) )
        }
    }
}


task sourcesJar( type: Jar ) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }

    developers {
        developer {
            id "venkatperi"
            name "Venkat Peri"
            email "venkatperi@gmail.com"
        }
    }
}

publishing {
    publications {
        mavenJava( MavenPublication ) {
            from components.java
            artifact sourcesJar

            pom.withXml {
                def root = asNode()
                root.appendNode( 'description', 'A library for manipulating Xcode projects' )
                root.children().last() + pomConfig
            }
        }
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

ext.testFiles = [
        "http://www.opensource.apple.com/source/keymgr/keymgr-28/keymgr.xcodeproj/project.pbxproj?txt": "keymgr"
]
task downloadTestFiles << {
    testFiles.each { k, v ->
        download {
            src k
            dest file( "src/test/resources/${v}.pbxproj" )
            onlyIfNewer true
        }
    }
}

//project.tasks.findByPath( "test" ).dependsOn downloadTestFiles

